/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   buckup                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ahammout <ahammout@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/25 11:15:34 by ahammout          #+#    #+#             */
/*   Updated: 2023/01/13 15:42:31 by ahammout         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* 
    +++++ get the absolute syntax of what between quotes; ++++++
    Arguments : data ==> struct of data,  tmp ==> the token with type |Quote|,  size of Lexeme.
*/
//abs_syntax(data, tmp, ft_strlen(tmp->lex));
    
	

int lexer(t_data *data)
{
    int         i;
    int         add_node;
    t_tokens    *tmp;
    t_tokens    *to_free;

    i = 0;
    add_node = 0;
    data->tokens = malloc(sizeof(t_tokens));
    if (!data->tokens)
        exit_error(data, 1, "Minishell: Allocation failed.");
    data->tokens->next = NULL;
    tmp = data->tokens;
    tmp->lex = data->tokens->lex;
    to_free = tmp;
    while (data->buffer[i])
    {
        if (data->buffer[i] == ' ' || data->buffer[i] == '\t')
            while(data->buffer[i] == ' ' || data->buffer[i] == '\t')
                i++;
        else if (data->buffer[i] != ' ' && data->buffer[i] != '\t' && data->buffer != '\0')
        {
            if (data->buffer[i] == SQUOTE)
            {
                if (add_node)
                {
                    add_new_node (data, tmp, quotes (data->buffer + i, tmp, SQUOTE, 0));
                    tmp = tmp->next;
                }
                i += quotes (data->buffer + i, tmp, SQUOTE, 0);
                add_node = 1;
            }
            else if (data->buffer[i] == DQUOTE)
            {
                if (add_node)
                {
                    add_new_node (data, tmp, quotes (data->buffer + i, tmp, DQUOTE, 0));
                    tmp = tmp->next;
                }
                i += quotes (data->buffer + i, tmp, DQUOTE, 1);
                add_node = 1;
            }
            else if (data->buffer[i] == ESCAP)
            {
                if (add_node)
                {
                    add_new_node (data, tmp, escap (data->buffer + i, tmp, 0));
                    tmp = tmp->next;
                }
                i += escap (data->buffer + i, tmp, 1);
                add_node = 1;
            }

            // REDIRECTION / APPEND OUTPUT  [File comes after those].
            else if (data->buffer[i] == REDOUT)
            {
                if (add_node)
                {
                    add_new_node (data, tmp, operator(data->buffer + i, tmp, REDOUT, 0));
                    tmp = tmp->next;
                }
                i += operator(data->buffer + i, tmp, REDOUT, 1);
                add_node = 1;
            }

            // REDIRECTION / APPEND INPUT.
            else if (data->buffer[i] == REDIN)
            {
                if (add_node)
                {
                    add_new_node(data, tmp, operator(data->buffer + i, tmp, REDOUT, 0));
                    tmp = tmp->next;
                }
                i += operator(data->buffer + i, tmp, REDIN, 1);
                add_node = 1;
            }
        
            /// OPERATIONAL OPERATORS.
            else if (data->buffer[i] == SEPERATOR)
            {
                // Sep case
                if (add_node)
                {
                    add_new_node(data, tmp, operator(data->buffer + i, tmp, REDOUT, 0));
                    tmp = tmp->next;
                }
                i += operator(data->buffer + i, tmp, SEPERATOR, 1);
                add_node = 1;

            }
            else if (data->buffer[i] == PIPE)
            {
                // Pipe case
                if (add_node)
                {
                    add_new_node(data, tmp, operator(data->buffer + i, tmp, REDOUT, 0));
                    tmp = tmp->next;
                }
                i += operator(data->buffer + i, tmp, PIPE, 1);
                add_node = 1;
            }
            else if (data->buffer[i] == EXPAND_)
            {
                // variable case
                if (add_node)
                {
                    add_new_node(data, tmp, operator(data->buffer + i, tmp, REDOUT, 0));
                    tmp = tmp->next;
                }
                i += operator(data->buffer + i, tmp, EXPAND_, 1);
                add_node = 1;
            }
            else
            {
                if (add_node)
                {
                    add_new_node(data, tmp, keyword(data->buffer + i, tmp, 0));
                    tmp = tmp->next;
                }
                tmp->lex = malloc(sizeof(char) * 2);
                i += keyword(data->buffer + i, tmp, 1);
                add_node = 1;
            }
        }
    }
    // display_list(data);
    // free_tmp(to_free);
    return (0);
}


// add var that coungtain the len of lexeme
// allocate the lexem with len 
int     add_new_node(t_data *data, t_tokens *tmp, int lex_size)
{
    t_tokens    *node;
    // t_tokens    *to_free;

    // to_free = tmp;
    node = malloc(sizeof(t_tokens));
    if (!node)
        exit_error(data, 1, "Malloc: allocation failed.");
    node->lex = malloc(sizeof(char) * lex_size);
    node->next = NULL;
    tmp->next = node;
    return (0);
}



int syntax_quotes(t_data *data)
{
    int i;
    int first;
    int last;

    i = 0;
    first = 0;
    last = 0;
    while (data->token->lex[i] == data->token->type)
    {
        i++;
        first++;
    }
    while (data->token->lex[i] != data->token->type)
    {
        if (data->token->lex[i] == EXPAND_)
        {
            printf("EXPAND that variable!\n");
            i += expander(data, data->token->lex + i);
        }
        i++;
    }
    while (data->token->lex[i++] == data->token->type)
        last++;
    if (first != last)
    {
        generate_err(data, data->token->lex, "inclosed quotes");
        return (1);
    }
    return (0);
}





///// OLD QUOTED LEXER //////

int quoted_size(char *buff, char type)
{
    int len;

    len = 0;
    while (buff[len] == type)
        len++;
    while (buff[len] != type)
        len++;
    while (buff[len] == type)
        len++;
    return (len);
}

int quotes(t_data *data, char *buff, char type)
{
    int i;
    int j;

    i = 0;
    j = 0;
    data->token->lex = malloc(sizeof(char) * quoted_size(buff, type));
    if (!data->token->lex)
        exit_error(data, 2, "Minishell: Allocation failed.");
    while (buff[i] == type)
        data->token->lex[j++] = buff[i++];
    while (buff[i] != type)
        data->token->lex[j++] = buff[i++];
    while (buff[i] == type)
        data->token->lex[j++] = buff[i++];
    data->token->lex[j] = '\0';
    data->token->type = type;
    return(i);
}


int non_empty(char *buff, char type)
{
    int i;

    i = 0;
    while (buff[i] )
    {
        if (buff[i] == type)
            return (1);
        i++;
    }
    return (0);
}

int check_quotes(char *lexem, int type)
{
    int i;
    int first;
    int last;
    int content;

    first = 0;
    last = 0;
    content = 0;
    while (lexem[first] == type)
        first++;
    i = first;
    while (lexem[i] != type && lexem[i] != '\0')
    {
        content++;
        i++;
    }
    while (lexem[i++] == type)
        last++;
    if (first != last && content > 1)
        return (-1);
    return (first + last);
}


// echo "" | ls -l | touch file | echo "This on The file" > file
// "union quoted "union quoted "Union Quoted "Union quoted""""    [W]
//  echo "hello, World "Here is again "Expand this $PWD UNION  """""   [W]

// int end_of_quote(char *buff, char type)
// {
//     int i;
//     int q;

//     i = 0;
//     q = 0;
//     while (q < 2)
//     {
//         if (buff[i] == type)
//             q++;
//         i++;  
//     }
//     return (i);
// }



// int quotes(t_data *data, char *buff, char type)
// {
//     int i;
//     int j;

//     i = 0;
//     j = 0;
//     data->token->lex = malloc(sizeof(char) * quoted_size(buff, type));
//     if (!data->token->lex)
//         exit_error(data, 2, "Minishell: Allocation failed.");
//     while (buff[i])
//     {
//         if (end_of_quote(buff + i, type))
//             break;
//         data->token->lex[j++] = buff[i++];
//     }
//     data->token->lex[j] = '\0';
//     data->token->type = type;
//     printf("Lexem +=> %s\n", data->token->lex);
//     exit (0);
//     return(i);
// }

int expand (t_data *data, char *buff)
{
    int i;
    int len;

    i = 0;
    len = 0;
    while (non_operator(buff[len]) && buff[len] != ' ' && buff[len] != '\t' && buff[len] != '\0')
        len++;
    data->token->lex = malloc (sizeof(char) * len);
    if (!data->token->lex)
        exit_error(data, 2, "Minishell: Allocation failed.");
    while (non_operator(buff[i]) && buff[len] != ' ' && buff[len] != '\t' && buff[len] != '\0')
    {
        data->token->lex[i] = buff[i];
        i++;
    }
    data->token->lex[i] = '\0';
    data->token->type = EXPAND_;
    return (i);
}

// 
// EXPANDTHIS$HOME     ====> pass WORD

// $HOME_ [N]

// $$PATH [N]       ND % 2 = 0  ==> NO EXPAND / LET INPUT.
// $$$PATH [V]      ND % 2 != 0 ==> EXPAND  / WHAT BEHIND.

// ${HOME} [V]
// $@HOME ===> LET & NO EXPAND.
// $[any number]HOME ===> LET & AND NOT EXPAND.
// $NON_DISPLAY ==> VAR NOT EXIST.
// $HOME. [V]